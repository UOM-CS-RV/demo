import mt.edu.um.cs.rv.demo.valour.external_triggers.SpringMVCInterceptorExternalTrigger
import mt.edu.um.cs.rv.demo.valour.external_triggers.OnSuccessfulLoginTriggerData
import java.time.LocalDateTime

declarations {
	category USER indexed by Long
	
	event userCreated() = {
    		monitor trigger fireUserCreated(Long id, String name)    
    		belonging to USER with index {{1L}}
    }  
    
    event userLogin(String username, LocalDateTime loginTime) = {
    		external trigger SpringMVCInterceptorExternalTrigger generates OnSuccessfulLoginTriggerData d
    		where username = {{d.username}}
			loginTime = {{d.loginTime}}
		when {{username != null}}
    }  
}

userCreated() -> {System.out.println("abc")}
userLogin(username, loginTime) | {{username != null}} -> { System.out.println("User login " + username + " at " + loginTime.toString)}

state {
	int userCount = {0}
	
} in { 
	
	userCreated() -> { 
			^state.userCount++
			System.out.println("Total Number of users in the system " + ^state.userCount)
		}
		
		state {
			int x = {10}
		}
		in {
			userCreated() -> {
				^state.x = ^state.parent.userCount
				System.out.println("X " + ^state.x)
			}
		}
}


replicate {
	int loginCount = {0}
}
foreach USER u {
	userCreated() -> {
			^state.loginCount++
			System.out.println("User has now logged in for " + ^state.loginCount)
	} 
	
	replicate {
		int loginCount = {10}
	}
	foreach USER u {
		userCreated() -> {
				^state.loginCount++
				System.out.println("User has now logged in for (+10) " + ^state.loginCount)
		} 
	
	
}
		
}


